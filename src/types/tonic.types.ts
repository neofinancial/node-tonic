/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/accounts/passwordchange': {
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
        /**
         * If the request body is invalid, the original password is invalid, the new password does not match the confirmed
         * password, or if the new password doesn't satisfy the password requirements.
         */
        400: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user cannot be found. */
        404: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['PasswordChangeModel'];
          'text/json': components['schemas']['PasswordChangeModel'];
          'application/*+json': components['schemas']['PasswordChangeModel'];
        };
      };
    };
  };
  '/api/accounts/passwordreset': {
    post: {
      responses: {
        /** Success */
        200: unknown;
        /** Bad Request */
        400: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['ResetPasswordRequestModel'];
          'text/json': components['schemas']['ResetPasswordRequestModel'];
          'application/*+json': components['schemas']['ResetPasswordRequestModel'];
        };
      };
    };
  };
  '/api/Accounts': {
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
        /** If the email or password is invalid */
        400: unknown;
        /** If the email is already in use */
        409: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['RegistrationRequestModel'];
          'text/json': components['schemas']['RegistrationRequestModel'];
          'application/*+json': components['schemas']['RegistrationRequestModel'];
        };
      };
    };
  };
  '/api/Auth/login': {
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['LoginResponseModel'];
            'application/json': components['schemas']['LoginResponseModel'];
            'text/json': components['schemas']['LoginResponseModel'];
          };
        };
        /** If the email/password combination is not correct */
        400: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['CredentialsRequestModel'];
          'text/json': components['schemas']['CredentialsRequestModel'];
          'application/*+json': components['schemas']['CredentialsRequestModel'];
        };
      };
    };
    delete: {
      parameters: {
        query: {
          id?: string;
        };
      };
      responses: {
        /** When the user no longer exists */
        200: unknown;
        /** If your user has workspaces that are shared with other users. */
        400: unknown;
      };
    };
  };
  '/api/Auth/token_refresh': {
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['RefreshTokenResponseModel'];
            'application/json': components['schemas']['RefreshTokenResponseModel'];
            'text/json': components['schemas']['RefreshTokenResponseModel'];
          };
        };
        /** If the token or username is invalid. */
        400: unknown;
        /** If the token and username do not match. */
        401: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['RefreshTokenRequestModel'];
          'text/json': components['schemas']['RefreshTokenRequestModel'];
          'application/*+json': components['schemas']['RefreshTokenRequestModel'];
        };
      };
    };
  };
  '/api/Auth/apikeys': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['UserApiKeyModel'][];
            'application/json': components['schemas']['UserApiKeyModel'][];
            'text/json': components['schemas']['UserApiKeyModel'][];
          };
        };
        /** If your user is not valid. */
        400: unknown;
      };
    };
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['UserApiKeyModel'];
            'application/json': components['schemas']['UserApiKeyModel'];
            'text/json': components['schemas']['UserApiKeyModel'];
          };
        };
        /** If your api key request if invalid. */
        400: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['UserApiKeyRequestModel'];
          'text/json': components['schemas']['UserApiKeyRequestModel'];
          'application/*+json': components['schemas']['UserApiKeyRequestModel'];
        };
      };
    };
  };
  '/api/Auth/apikeys/{id}': {
    delete: {
      parameters: {
        path: {
          id: string;
        };
      };
      responses: {
        /** When the API key no longer exists */
        200: unknown;
        /** If your user is not valid. */
        400: unknown;
      };
    };
  };
  '/api/Collection': {
    get: {
      parameters: {
        query: {
          /** The Id of the workspace */
          workspaceId?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': string[];
            'application/json': string[];
            'text/json': string[];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
    };
  };
  '/api/Collection/full': {
    get: {
      parameters: {
        query: {
          /** The Id of the workspace */
          workspaceId?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['Table'][];
            'application/json': components['schemas']['Table'][];
            'text/json': components['schemas']['Table'][];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
    };
  };
  '/api/Comments': {
    get: {
      parameters: {
        query: {
          /** The ID of the workspace that you want to grab the comments from. */
          workspaceId?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['CommentResponseModel'][];
            'application/json': components['schemas']['CommentResponseModel'][];
            'text/json': components['schemas']['CommentResponseModel'][];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
    post: {
      responses: {
        /** Success */
        201: {
          content: {
            'text/plain': components['schemas']['CommentResponseModel'];
            'application/json': components['schemas']['CommentResponseModel'];
            'text/json': components['schemas']['CommentResponseModel'];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['CreateCommentRequestModel'];
          'text/json': components['schemas']['CreateCommentRequestModel'];
          'application/*+json': components['schemas']['CreateCommentRequestModel'];
        };
      };
    };
  };
  '/api/Comments/{commentId}': {
    put: {
      parameters: {
        path: {
          commentId: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['CommentResponseModel'];
            'application/json': components['schemas']['CommentResponseModel'];
            'text/json': components['schemas']['CommentResponseModel'];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** If you are not allowed to edit this comment. */
        403: unknown;
        /** If the comment cannot be found. */
        404: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['EditCommentRequestModel'];
          'text/json': components['schemas']['EditCommentRequestModel'];
          'application/*+json': components['schemas']['EditCommentRequestModel'];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          commentId: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
        /** Unauthorized */
        401: unknown;
        /** If you are not allowed to delete this comment. */
        403: unknown;
        /** If the comment cannot be found. */
        404: unknown;
      };
    };
  };
  '/api/DataSource': {
    get: {
      parameters: {
        query: {
          /** The id of the workspace */
          workspaceId?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['AddDataSourceResponseModel'];
            'application/json': components['schemas']['AddDataSourceResponseModel'];
            'text/json': components['schemas']['AddDataSourceResponseModel'];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
    };
  };
  '/api/DataSource/minimal': {
    get: {
      parameters: {
        query: {
          /** The id of the workspace */
          workspaceId?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': {
              [key: string]: components['schemas']['AddDataSourceResponseModel'];
            };
            'application/json': {
              [key: string]: components['schemas']['AddDataSourceResponseModel'];
            };
            'text/json': {
              [key: string]: components['schemas']['AddDataSourceResponseModel'];
            };
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
    };
  };
  '/api/DataSource/source_db': {
    put: {
      responses: {
        /** Success */
        200: unknown;
        /** Invalid database type. */
        400: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['DatabaseFormRequestModel'];
          'text/json': components['schemas']['DatabaseFormRequestModel'];
          'application/*+json': components['schemas']['DatabaseFormRequestModel'];
        };
      };
    };
  };
  '/api/DataSource/destination_db': {
    put: {
      responses: {
        /** Success */
        200: unknown;
        /** Invalid database type. */
        400: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['DatabaseFormRequestModel'];
          'text/json': components['schemas']['DatabaseFormRequestModel'];
          'application/*+json': components['schemas']['DatabaseFormRequestModel'];
        };
      };
    };
  };
  '/api/DataSource/spark_connection_info': {
    put: {
      responses: {
        /** Success */
        200: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['SparkConnectionInfoRequestModel'];
          'text/json': components['schemas']['SparkConnectionInfoRequestModel'];
          'application/*+json': components['schemas']['SparkConnectionInfoRequestModel'];
        };
      };
    };
  };
  '/api/DataSource/delete_fkupload': {
    post: {
      parameters: {
        query: {
          /** The Id of the source data source */
          dataSourceId?: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or data source cannot be found. */
        404: unknown;
      };
    };
  };
  '/api/DataSource/delete_clientkey': {
    post: {
      parameters: {
        query: {
          /** workspaceId */
          workspaceId?: string;
          /** whether is source or dest */
          isSource?: boolean;
        };
      };
      responses: {
        /** Success */
        200: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  '/api/DataSource/delete_clientcert': {
    post: {
      parameters: {
        query: {
          /** workspaceId */
          workspaceId?: string;
          /** whether is source or dest */
          isSource?: boolean;
        };
      };
      responses: {
        /** Success */
        200: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  '/api/DataSource/delete_rootcert': {
    post: {
      parameters: {
        query: {
          /** workspaceId */
          workspaceId?: string;
          /** whether is source or dest */
          isSource?: boolean;
        };
      };
      responses: {
        /** Success */
        200: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  '/api/DataSource/delete_gbqserviceaccount': {
    post: {
      parameters: {
        query: {
          /** The Id of the source data source */
          workspaceId?: string;
          /** Boolean indicating whether to apply operation to the source or destination database */
          isSource?: boolean;
        };
      };
      responses: {
        /** Success */
        200: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or data source cannot be found. */
        404: unknown;
      };
    };
  };
  '/api/GenerateData': {
    get: {
      parameters: {
        query: {
          /** The Id of the workspace */
          workspaceId?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['JobScanModel'][];
            'application/json': components['schemas']['JobScanModel'][];
            'text/json': components['schemas']['JobScanModel'][];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
    };
  };
  '/api/GenerateData/jobs/{databaseScanId}': {
    get: {
      parameters: {
        path: {
          /** The ID of the data generation job. */
          databaseScanId: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['JobScanModel'];
            'application/json': components['schemas']['JobScanModel'];
            'text/json': components['schemas']['JobScanModel'];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the data generation job, user or workspace cannot be found. */
        404: unknown;
      };
    };
  };
  '/api/GenerateData/start': {
    post: {
      parameters: {
        query: {
          /** The Id of the workspace */
          workspaceId?: string;
          /**
           * Specifies whether to run in strict generation mode or not.
           *
           * 1 - Data generation will not be queued if schema diff actions (missing tables, changed nullability, missing column, changed column)
           * have invalidated the workspace.
           *
           * 2 - Data generation will not be queued if any schema changes are detected (including new table, new column, etc.).
           */
          strictMode?: components['schemas']['StrictGenerationEnum'];
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['IdModel'];
            'application/json': components['schemas']['IdModel'];
            'text/json': components['schemas']['IdModel'];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
        /** Schema changes detected, data generation cannot be queued until resolved. */
        409: unknown;
        /** If server error or source or destination database is not set. */
        500: unknown;
      };
    };
  };
  '/api/GenerateData/cancel': {
    post: {
      parameters: {
        query: {
          /** The Id of the workspace */
          workspaceId?: string;
          /** The Id of the data generation job */
          generateDataId?: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
    };
  };
  '/api/Groups': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['ShareableEntityModel'];
            'application/json': components['schemas']['ShareableEntityModel'];
            'text/json': components['schemas']['ShareableEntityModel'];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  '/api/Groups/cleanup': {
    post: {
      responses: {
        /** Success */
        200: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  '/api/PiiReport/most_recent_active_or_completed_status': {
    get: {
      parameters: {
        query: {
          workspaceId?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['JobScanModel'];
            'application/json': components['schemas']['JobScanModel'];
            'text/json': components['schemas']['JobScanModel'];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
    };
  };
  '/api/PiiReport/cancel': {
    post: {
      parameters: {
        query: {
          /** The id of the workspace for which any report generation job is being cancelled. */
          piiReportId?: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
    };
  };
  '/api/PiiReport/start': {
    post: {
      parameters: {
        query: {
          /** The id of the workspace for which any report generation job is being cancelled. */
          workspaceId?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['PiiReportRun'];
            'application/json': components['schemas']['PiiReportRun'];
            'text/json': components['schemas']['PiiReportRun'];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
        /**
         * If the workspace already has an report generation job in the Tonic work queue or if report generation is already running for the
         * workspace.
         */
        500: unknown;
      };
    };
  };
  '/api/PiiReport': {
    get: {
      parameters: {
        query: {
          /** The Id of the workspace */
          workspaceId?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['JobScanModel'][];
            'application/json': components['schemas']['JobScanModel'][];
            'text/json': components['schemas']['JobScanModel'][];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
    };
  };
  '/api/Privacy/history': {
    get: {
      parameters: {
        query: {
          workspaceId?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
    };
  };
  '/api/Privacy/privacyforcolumns': {
    get: {
      parameters: {
        query: {
          workspaceId?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
    };
  };
  '/api/Privacy/piitypeforcolumns': {
    get: {
      parameters: {
        query: {
          workspaceId?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
    };
  };
  '/api/Privacy/ignore': {
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['IgnoreSensitiveColumnRequestModel'];
          'text/json': components['schemas']['IgnoreSensitiveColumnRequestModel'];
          'application/*+json': components['schemas']['IgnoreSensitiveColumnRequestModel'];
        };
      };
    };
  };
  '/api/Privacy/set': {
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['MarkSensitiveColumnRequestModel'];
          'text/json': components['schemas']['MarkSensitiveColumnRequestModel'];
          'application/*+json': components['schemas']['MarkSensitiveColumnRequestModel'];
        };
      };
    };
  };
  '/api/Privacy/suggestions': {
    get: {
      parameters: {
        query: {
          workspaceId?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
    };
  };
  '/api/SchemaDiff': {
    get: {
      parameters: {
        query: {
          /** The Id of the workspace */
          workspaceId?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['SchemaDiffItem'][];
            'application/json': components['schemas']['SchemaDiffItem'][];
            'text/json': components['schemas']['SchemaDiffItem'][];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
    };
  };
  '/api/SchemaDiff/resolve': {
    post: {
      responses: {
        /** Success */
        200: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['SchemaDiffItemResolveRequestModel'];
          'text/json': components['schemas']['SchemaDiffItemResolveRequestModel'];
          'application/*+json': components['schemas']['SchemaDiffItemResolveRequestModel'];
        };
      };
    };
  };
  '/api/SchemaDiff/resolve_multiple': {
    post: {
      responses: {
        /** Success */
        200: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['SchemaDiffMultipleItemsResolveRequestModel'];
          'text/json': components['schemas']['SchemaDiffMultipleItemsResolveRequestModel'];
          'application/*+json': components['schemas']['SchemaDiffMultipleItemsResolveRequestModel'];
        };
      };
    };
  };
  '/api/Table': {
    get: {
      parameters: {
        query: {
          /** The Id of the workspace */
          workspaceId?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['Table'][];
            'application/json': components['schemas']['Table'][];
            'text/json': components['schemas']['Table'][];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
    };
  };
  '/api/Table/relationships': {
    get: {
      parameters: {
        query: {
          /** The Id of the workspace */
          workspaceId?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['ColumnRelationship'][];
            'application/json': components['schemas']['ColumnRelationship'][];
            'text/json': components['schemas']['ColumnRelationship'][];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
    };
  };
  '/api/Users': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['ShareableEntityModel'];
            'application/json': components['schemas']['ShareableEntityModel'];
            'text/json': components['schemas']['ShareableEntityModel'];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  '/api/UserSettings': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['UserSettingsResponseModel'];
            'application/json': components['schemas']['UserSettingsResponseModel'];
            'text/json': components['schemas']['UserSettingsResponseModel'];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['UserSettingsResponseModel'];
            'application/json': components['schemas']['UserSettingsResponseModel'];
            'text/json': components['schemas']['UserSettingsResponseModel'];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['UserSettingsRequestModel'];
          'text/json': components['schemas']['UserSettingsRequestModel'];
          'application/*+json': components['schemas']['UserSettingsRequestModel'];
        };
      };
    };
  };
  '/api/Version': {
    get: {
      responses: {
        /** Success */
        200: unknown;
      };
    };
  };
  '/api/Webhook': {
    get: {
      parameters: {
        query: {
          workspaceId?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': {
              [key: string]: components['schemas']['WebhookConfiguration'];
            };
            'application/json': {
              [key: string]: components['schemas']['WebhookConfiguration'];
            };
            'text/json': {
              [key: string]: components['schemas']['WebhookConfiguration'];
            };
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  '/api/Webhook/{webhookId}': {
    put: {
      parameters: {
        query: {
          workspaceId?: string;
        };
        path: {
          webhookId: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['WebhookConfiguration'];
            'application/json': components['schemas']['WebhookConfiguration'];
            'text/json': components['schemas']['WebhookConfiguration'];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['WebhookConfiguration'];
          'text/json': components['schemas']['WebhookConfiguration'];
          'application/*+json': components['schemas']['WebhookConfiguration'];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          webhookId: string;
        };
        query: {
          workspaceId?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': boolean;
            'application/json': boolean;
            'text/json': boolean;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  '/api/Webhook/test': {
    post: {
      parameters: {
        query: {
          workspaceId?: string;
          workspaceName?: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['SubsetPreview'];
            'application/json': components['schemas']['SubsetPreview'];
            'text/json': components['schemas']['SubsetPreview'];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['WebhookTestRequestModel'];
          'text/json': components['schemas']['WebhookTestRequestModel'];
          'application/*+json': components['schemas']['WebhookTestRequestModel'];
        };
      };
    };
  };
  '/api/Workspace': {
    get: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['WorkspaceEntry'][];
            'application/json': components['schemas']['WorkspaceEntry'][];
            'text/json': components['schemas']['WorkspaceEntry'][];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
    post: {
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['CreateWorkspaceResponseModel'];
            'application/json': components['schemas']['CreateWorkspaceResponseModel'];
            'text/json': components['schemas']['CreateWorkspaceResponseModel'];
          };
        };
        /** If the workspace name is empty. */
        400: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the workspace name is already in use. */
        409: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['CreateWorkspaceRequestModel'];
          'text/json': components['schemas']['CreateWorkspaceRequestModel'];
          'application/*+json': components['schemas']['CreateWorkspaceRequestModel'];
        };
      };
    };
  };
  '/api/Workspace/{workspaceId}/status': {
    get: {
      parameters: {
        path: {
          /** The ID of the workspace */
          workspaceId: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['WorkspaceEntry'];
            'application/json': components['schemas']['WorkspaceEntry'];
            'text/json': components['schemas']['WorkspaceEntry'];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  '/api/Workspace/{workspaceId}': {
    get: {
      parameters: {
        path: {
          workspaceId: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['WorkspaceModel'];
            'application/json': components['schemas']['WorkspaceModel'];
            'text/json': components['schemas']['WorkspaceModel'];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          workspaceId: string;
        };
      };
      responses: {
        /** Success */
        201: unknown;
        /** If the workspace data cannot be parsed. */
        400: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          workspaceId: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['CreateWorkspaceResponseModel'];
            'application/json': components['schemas']['CreateWorkspaceResponseModel'];
            'text/json': components['schemas']['CreateWorkspaceResponseModel'];
          };
        };
        /** If the fingerprint ID is empty. */
        400: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the fingerprint ID cannot be found. */
        404: unknown;
      };
    };
    patch: {
      parameters: {
        path: {
          workspaceId: string;
        };
      };
      responses: {
        /** Success */
        201: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
        /** If the patch is unsuccessfully applied or invalid. */
        409: unknown;
      };
    };
  };
  '/api/Workspace/{workspaceId}/replacements/{schema}/{table}': {
    get: {
      parameters: {
        path: {
          workspaceId: string;
          schema: string;
          table: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': {
              [key: string]: components['schemas']['Replacement'];
            };
            'application/json': {
              [key: string]: components['schemas']['Replacement'];
            };
            'text/json': {
              [key: string]: components['schemas']['Replacement'];
            };
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
    };
  };
  '/api/Workspace/{workspaceId}/update_replacements/{schema}/{table}': {
    put: {
      parameters: {
        path: {
          workspaceId: string;
          schema: string;
          table: string;
        };
      };
      responses: {
        /** Success */
        201: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['UpdateTableReplacementsRequestModel'];
          'text/json': components['schemas']['UpdateTableReplacementsRequestModel'];
          'application/*+json': components['schemas']['UpdateTableReplacementsRequestModel'];
        };
      };
    };
  };
  '/api/Workspace/{workspaceId}/rename': {
    put: {
      parameters: {
        path: {
          workspaceId: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
        /** If the new workspace name is empty. */
        400: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['RenameWorkspaceRequestModel'];
          'text/json': components['schemas']['RenameWorkspaceRequestModel'];
          'application/*+json': components['schemas']['RenameWorkspaceRequestModel'];
        };
      };
    };
  };
  '/api/Workspace/{workspaceId}/transfer': {
    put: {
      parameters: {
        path: {
          workspaceId: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
        /** If the new workspace owner is empty. */
        400: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['TransferOwnershipRequestModel'];
          'text/json': components['schemas']['TransferOwnershipRequestModel'];
          'application/*+json': components['schemas']['TransferOwnershipRequestModel'];
        };
      };
    };
  };
  '/api/Workspace/{workspaceId}/copy': {
    post: {
      parameters: {
        path: {
          workspaceId: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['CreateWorkspaceResponseModel'];
            'application/json': components['schemas']['CreateWorkspaceResponseModel'];
            'text/json': components['schemas']['CreateWorkspaceResponseModel'];
          };
        };
        /** If the workspace id or new workspace name are empty. */
        400: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
        /** If the new workspace name is already in use by the specified user. */
        409: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['CopyWorkspaceRequestModel'];
          'text/json': components['schemas']['CopyWorkspaceRequestModel'];
          'application/*+json': components['schemas']['CopyWorkspaceRequestModel'];
        };
      };
    };
  };
  '/api/Workspace/{workspaceId}/{schema}/{table}': {
    delete: {
      parameters: {
        path: {
          workspaceId: string;
          schema: string;
          table: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** User or workspace not found. */
        404: unknown;
      };
    };
  };
  '/api/Workspace/{workspaceId}/bulk_table_mode': {
    post: {
      parameters: {
        path: {
          workspaceId: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['WorkspaceModel'];
            'application/json': components['schemas']['WorkspaceModel'];
            'text/json': components['schemas']['WorkspaceModel'];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['SetBulkTableModeRequestModel'];
          'text/json': components['schemas']['SetBulkTableModeRequestModel'];
          'application/*+json': components['schemas']['SetBulkTableModeRequestModel'];
        };
      };
    };
  };
  '/api/Workspace/{workspaceId}/shares': {
    get: {
      parameters: {
        path: {
          workspaceId: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['WorkspaceShareModel'][];
            'application/json': components['schemas']['WorkspaceShareModel'][];
            'text/json': components['schemas']['WorkspaceShareModel'][];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
    };
    post: {
      parameters: {
        path: {
          workspaceId: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['WorkspaceShareModel'];
            'application/json': components['schemas']['WorkspaceShareModel'];
            'text/json': components['schemas']['WorkspaceShareModel'];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['CreateWorkspaceShareRequestModel'];
          'text/json': components['schemas']['CreateWorkspaceShareRequestModel'];
          'application/*+json': components['schemas']['CreateWorkspaceShareRequestModel'];
        };
      };
    };
  };
  '/api/Workspace/{workspaceId}/shares/{workspaceShareId}': {
    put: {
      parameters: {
        path: {
          workspaceId: string;
          workspaceShareId: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['WorkspaceShareModel'];
            'application/json': components['schemas']['WorkspaceShareModel'];
            'text/json': components['schemas']['WorkspaceShareModel'];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['EditWorkspaceShareRequestModel'];
          'text/json': components['schemas']['EditWorkspaceShareRequestModel'];
          'application/*+json': components['schemas']['EditWorkspaceShareRequestModel'];
        };
      };
    };
    delete: {
      parameters: {
        path: {
          workspaceId: string;
          workspaceShareId: string;
        };
      };
      responses: {
        /** Success */
        200: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
    };
  };
  '/api/Workspace/{workspaceId}/users': {
    get: {
      parameters: {
        path: {
          workspaceId: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['ShareableEntityModel'];
            'application/json': components['schemas']['ShareableEntityModel'];
            'text/json': components['schemas']['ShareableEntityModel'];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  '/api/Workspace/{workspaceId}/subset': {
    get: {
      parameters: {
        path: {
          workspaceId: string;
        };
      };
      responses: {
        /** Success */
        200: {
          content: {
            'text/plain': components['schemas']['SubsetPreview'];
            'application/json': components['schemas']['SubsetPreview'];
            'text/json': components['schemas']['SubsetPreview'];
          };
        };
        /** If the subsetting algorithm cannot be found. */
        400: unknown;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** If the user or workspace cannot be found. */
        404: unknown;
      };
    };
  };
}

export interface components {
  schemas: {
    AddDataSourceResponseModel: {
      sourceDatabase?: components['schemas']['DatabaseModel'];
      destinationDatabase?: components['schemas']['DatabaseModel'];
      sourceS3?: components['schemas']['S3Model'];
      destinationS3?: components['schemas']['S3Model'];
      sourceEmrSpark?: components['schemas']['EmrSparkModel'];
      destinationEmrSpark?: components['schemas']['EmrSparkModel'];
      sourceDatabricksSpark?: components['schemas']['DatabricksSparkModel'];
      destinationDatabricksSpark?: components['schemas']['DatabricksSparkModel'];
      sparkConnection?: components['schemas']['SparkConnectionModel'];
      sparkConfig?: components['schemas']['SparkConfigEntryModel'][] | null;
    };
    AppUser: {
      id?: string | null;
      userName?: string | null;
      normalizedUserName?: string | null;
      email?: string | null;
      normalizedEmail?: string | null;
      emailConfirmed?: boolean;
      passwordHash?: string | null;
      securityStamp?: string | null;
      concurrencyStamp?: string | null;
      phoneNumber?: string | null;
      phoneNumberConfirmed?: boolean;
      twoFactorEnabled?: boolean;
      lockoutEnd?: string | null;
      lockoutEnabled?: boolean;
      accessFailedCount?: number;
      firstName?: string | null;
      lastName?: string | null;
      applicationState: string;
      notificationLevelPreference: components['schemas']['NotificationLevel'];
      userApiKeys?: components['schemas']['UserApiKey'][] | null;
      workspacesSharedWithUser?: components['schemas']['WorkspaceShare'][] | null;
      memberOfGroups?: components['schemas']['GroupMembership'][] | null;
      createdDate: components['schemas']['Instant'];
      lastModifiedDate: components['schemas']['Instant'];
      deleted?: boolean;
    };
    AwsRegionEnum: 'UsEast1' | 'UsEast2' | 'UsWest1' | 'UsWest2' | 'CaCentral1';
    BaseMetadata: {
      isConsistent?: boolean | null;
      consistencyColumn?: string | null;
      isDifferentiallyPrivate?: boolean | null;
    };
    Column: {
      schema?: string | null;
      table?: string | null;
      columnName?: string | null;
      dataType?: string | null;
      simpleDataType?: string | null;
      dateTimeSubsetType?: string | null;
      isNullable?: boolean;
      keyType?: components['schemas']['KeyType'];
      isTargetOfUserDefinedForeignKey?: boolean;
      isUnique?: boolean;
      allowedGenerators?: string[] | null;
      suggestedGenerators?: string[] | null;
      disabledForScaleUp?: boolean;
      numericDefinition?: components['schemas']['NumericDefinition'];
    };
    ColumnKey: {
      schema?: string | null;
      table?: string | null;
      columnName?: string | null;
      keyType?: components['schemas']['KeyType'];
    };
    ColumnRelationship: {
      pkSchema?: string | null;
      pkTable?: string | null;
      pkColumn?: string | null;
      fkSchema?: string | null;
      fkTable?: string | null;
      fkColumn?: string | null;
      constraint?: components['schemas']['ForeignKeyConstraintKey'];
      nullable?: boolean;
      userInputted?: boolean;
    };
    CommentResponseModel: {
      id?: string | null;
      path?: string[] | null;
      commentText?: string | null;
      workspaceId?: string | null;
      userId?: string | null;
      username?: string | null;
      mentions?: string[] | null;
      createdDate?: string | null;
      lastModifiedDate?: string | null;
    };
    CopyWorkspaceRequestModel: {
      copyName?: string | null;
    };
    CreateCommentRequestModel: {
      workspaceId?: string | null;
      commentText?: string | null;
      /** An array of string that represents the workspace object being commented on. For example: ["schema", "table", "field"] */
      path?: string[] | null;
      mentions?: string[] | null;
    };
    CreateWorkspaceRequestModel: {
      name?: string | null;
    };
    CreateWorkspaceResponseModel: {
      id?: string | null;
    };
    CreateWorkspaceShareRequestModel: {
      /** The user that the workspace is shared with. This field should be left null if the share is for a group. */
      sharedWithUserId?: string | null;
      /** The group that the workspace is shared with. This field should be left null if the share is for a user. */
      sharedWithGroupId?: string | null;
      /**
       * The level of access your user has to this workspace.
       * <br />Values are 0 - None, 1 - Viewer, 2 - Auditor, 3 - Editor, 999 - Owner.
       */
      accessLevel?: number;
    };
    CredentialsRequestModel: {
      userName?: string | null;
      password?: string | null;
    };
    Database: {
      id: string;
      databaseName: string;
      server: string;
      databaseType: string;
      username: string;
      port: number;
      sslEnabled: boolean;
      trustServerCertificate: boolean;
      encryptedPassword?: string | null;
      fkData?: string | null;
      fkDataFileName?: string | null;
      encryptedBigQueryServiceAccount?: string | null;
      bigQueryServiceAccount?: string | null;
      bigQueryServiceAccountFileName?: string | null;
      bigQueryProjectId?: string | null;
      bigQueryDatasetName?: string | null;
      password?: string | null;
      useSshBastionTunnel: boolean;
      sshBastionHost?: string | null;
      sshBastionPort?: number;
      sshBastionUser?: string | null;
      encryptedSshBastionPrivateKey?: string | null;
      sshBastionPrivateKey?: string | null;
      encryptedSshBastionPassphrase?: string | null;
      sshBastionPassphrase?: string | null;
      oracleSchema?: string | null;
      s3BucketPath?: string | null;
      awsRegion?: components['schemas']['AwsRegionEnum'];
      encryptedAwsAccessKeyId?: string | null;
      awsAccessKeyId?: string | null;
      encryptedAwsSecretAccessKey?: string | null;
      awsSecretAccessKey?: string | null;
      encryptedClientKey?: string | null;
      clientKey?: string | null;
      clientKeyName?: string | null;
      encryptedClientCert?: string | null;
      clientCert?: string | null;
      clientCertName?: string | null;
      encryptedRootCert?: string | null;
      rootCert?: string | null;
      rootCertName?: string | null;
      mongoAuthenticationDatabase?: string | null;
      mongoUseSrv?: boolean;
      createdDate: components['schemas']['Instant'];
      lastModifiedDate: components['schemas']['Instant'];
      generationStrictness?: components['schemas']['StrictGenerationEnum'];
    };
    DatabaseFormRequestModel: {
      databaseType?: components['schemas']['DatabaseType'];
      server?: string | null;
      username?: string | null;
      password?: string | null;
      port?: number;
      database?: string | null;
      sslEnabled?: boolean;
      trustServerCertificate?: boolean;
      workspaceId?: string | null;
      selectedFkUploadFile?: string | null;
      selectedFkUploadFileName?: string | null;
      /** Base64 encoding of Google Console Service Account file */
      selectedServiceAccountFile?: string | null;
      selectedServiceAccountFileName?: string | null;
      bigQueryProjectId?: string | null;
      bigQueryDatasetName?: string | null;
      useSshBastionTunnel?: boolean;
      sshBastionConnectionInfo?: components['schemas']['SshConnectionInfoModel'];
      oracleSchema?: string | null;
      s3BucketPath?: string | null;
      awsAccessKeyId?: string | null;
      awsSecretAccessKey?: string | null;
      awsRegion?: components['schemas']['AwsRegionEnum'];
      sparkConfig?: components['schemas']['SparkConfigEntryModel'][] | null;
      clientKey?: string | null;
      clientKeyName?: string | null;
      clientCert?: string | null;
      clientCertName?: string | null;
      rootCert?: string | null;
      rootCertName?: string | null;
      mongoAuthenticationDatabase?: string | null;
      mongoUseSrv?: boolean;
      emrSparkData?: components['schemas']['EmrSparkModel'];
      databricksSparkData?: components['schemas']['DatabricksSparkModel'];
      generationStrictness?: components['schemas']['StrictGenerationEnum'];
    };
    DatabaseModel: {
      id?: string | null;
      server?: string | null;
      username?: string | null;
      password?: string | null;
      port?: number;
      database?: string | null;
      databaseType?: string | null;
      sslEnabled?: boolean;
      trustServerCertificate?: boolean;
      fkUploadFilename?: string | null;
      useSshBastionTunnel?: boolean;
      bigQueryServiceAccountFileName?: string | null;
      bigQueryProjectId?: string | null;
      bigQueryDatasetName?: string | null;
      sshBastionHost?: string | null;
      sshBastionPort?: number;
      sshBastionUser?: string | null;
      sshBastionPrivateKey?: string | null;
      sshBastionPassphrase?: string | null;
      oracleSchema?: string | null;
      clientKeyName?: string | null;
      clientCertName?: string | null;
      rootCertName?: string | null;
      mongoAuthenticationDatabase?: string | null;
      mongoUseSrv?: boolean;
      generationStrictness?: components['schemas']['StrictGenerationEnum'];
      s3BucketPath?: string | null;
      awsAccessKeyId?: string | null;
      awsSecretAccessKey?: string | null;
    };
    DatabaseScan: {
      id: string;
      fingerprint: components['schemas']['Fingerprint'];
      fingerprintId: string;
      startScanTime?: components['schemas']['Instant'];
      endScanTime?: components['schemas']['Instant'];
      publishedTime: components['schemas']['Instant'];
      workspaceConfiguration?: string | null;
      foreignKeyFile?: string | null;
      errorMessages?: string | null;
      status: string;
      subsettingEnabledScan?: boolean;
      processAllTablesWhenSubsettingScan?: boolean;
      subsetTargetHash?: number;
      createdDate: components['schemas']['Instant'];
      lastModifiedDate: components['schemas']['Instant'];
      workerId?: string | null;
    };
    DatabaseType:
      | 'MySql'
      | 'Postgres'
      | 'SqlServer'
      | 'Oracle'
      | 'BigQuery'
      | 'EmrSpark'
      | 'DatabricksSpark'
      | 'DB2'
      | 'Mongo'
      | 'Redshift'
      | 'DB2iSeries'
      | 'MongoLegacy'
      | 'Snowflake';
    DatabricksClusterConnectionInfo: {
      apiToken?: string | null;
      host?: string | null;
      httpPath?: string | null;
      port?: number;
      useDatabricksJobCluster?: boolean;
      awsAttributesForDatabricksJobCluster?: string | null;
    };
    DatabricksConnection: {
      id: string;
      database?: string | null;
      destLocation?: string | null;
      createDestFolder?: boolean | null;
      enablePartitionFilterValidation?: boolean | null;
      writeAllTablesToDelta?: boolean;
    };
    DatabricksSparkModel: {
      database?: string | null;
      destLocation?: string | null;
      createDestFolder?: boolean;
      enablePartitionFilterValidation?: boolean;
      writeAllTablesToDelta?: boolean;
    };
    EditCommentRequestModel: {
      commentText?: string | null;
      mentions?: string[] | null;
    };
    EditWorkspaceShareRequestModel: {
      accessLevel?: number;
    };
    EmrConnection: {
      id: string;
      catalogName?: string | null;
      catalogDatabase?: string | null;
      catalogId?: string | null;
      enableCrossAccountAccess?: boolean;
      destS3Path?: string | null;
    };
    EmrSparkModel: {
      catalogId?: string | null;
      catalogName?: string | null;
      catalogDatabase?: string | null;
      enableCrossAccountAccess?: boolean;
      destS3Path?: string | null;
    };
    EmrStepsConnectionInfo: {
      emrClusterId?: string | null;
    };
    Fingerprint: {
      id: string;
      fingerprintName: string;
      userId: string;
      sourceDatabaseId?: string | null;
      sourceDatabase?: components['schemas']['Database'];
      destinationDatabaseId?: string | null;
      destinationDatabase?: components['schemas']['Database'];
      sourceEmrConnectionId?: string | null;
      sourceEmrConnection?: components['schemas']['EmrConnection'];
      destinationEmrConnectionId?: string | null;
      destinationEmrConnection?: components['schemas']['EmrConnection'];
      sourceDatabricksConnectionId?: string | null;
      sourceDatabricksConnection?: components['schemas']['DatabricksConnection'];
      destinationDatabricksConnectionId?: string | null;
      destinationDatabricksConnection?: components['schemas']['DatabricksConnection'];
      data: string;
      isDeleted?: boolean;
      workspacesShares?: components['schemas']['WorkspaceShare'][] | null;
      createdDate: components['schemas']['Instant'];
      lastModifiedDate: components['schemas']['Instant'];
    };
    FkUploadModelItem: {
      fk_table?: string | null;
      target_table?: string | null;
      fk_schema?: string | null;
      target_schema?: string | null;
      fk_columns?: string[] | null;
      target_columns?: string[] | null;
      nullable?: boolean;
    };
    ForeignKeyConstraintKey: {
      schema?: string | null;
      table?: string | null;
      constraintName?: string | null;
    };
    Group: {
      id?: string | null;
      groupName?: string | null;
      workspacesSharedWithGroup?: components['schemas']['WorkspaceShare'][] | null;
      groupMemberships?: components['schemas']['GroupMembership'][] | null;
    };
    GroupMembership: {
      id?: string | null;
      groupUserId: string;
      groupUser?: components['schemas']['AppUser'];
      groupId: string;
      memberOfGroup?: components['schemas']['Group'];
    };
    IdModel: {
      id?: string | null;
    };
    IgnoreSensitiveColumnRequestModel: {
      workspaceId?: string | null;
      columnKeys?: components['schemas']['ColumnKey'][] | null;
    };
    Instant: { [key: string]: unknown };
    JobScanModel: {
      id?: string | null;
      fingerprintId?: string | null;
      startScanTime?: components['schemas']['Instant'];
      endScanTime?: components['schemas']['Instant'];
      publishedTime?: components['schemas']['Instant'];
      warnings?: components['schemas']['JobWarningModel'][] | null;
      errorMessages?: string | null;
      status?: string | null;
      shouldUserBeNotified?: boolean;
      databaseScanId?: string | null;
      tasks?: components['schemas']['JobTaskModel'][] | null;
      subsettingEnabledScan?: boolean;
      processAllTablesWhenSubsettingScan?: boolean;
      subsetTargetHash?: number;
      hasGanModelAssets?: boolean;
      progress?: number;
      currentAction?: string | null;
      progressCheckTimestamp?: components['schemas']['Instant'];
    };
    JobTaskModel: {
      id?: string | null;
      databaseScanId?: string | null;
      action?: string | null;
      unit?: string | null;
      unitType?: string | null;
      startTime?: components['schemas']['Instant'];
      endTime?: components['schemas']['Instant'];
      stepsCompleted?: number;
      totalSteps?: number | null;
      tableName?: string | null;
      presentOnlyWhenActive?: boolean;
    };
    JobWarningModel: {
      id?: string | null;
      jobType?: string | null;
      jobId?: string | null;
      warningMessage?: string | null;
      exceptionType?: string | null;
      count?: number;
    };
    KeyType: 'None' | 'Primary' | 'Foreign' | 'Both';
    Link: {
      generatorName?: string | null;
      generatorId?: string | null;
      column?: string | null;
      table?: string | null;
      schema?: string | null;
      metadata?: components['schemas']['BaseMetadata'];
      subGeneratorId?: string | null;
      pathExpression?: string | null;
      customValueProcessor?: string | null;
      customSubGeneratorValueProcessor?: string | null;
      dataType?: string | null;
    };
    LoginResponseModel: {
      userId?: string | null;
      jwt?: string | null;
      expiresIn?: number;
      refreshToken?: string;
      username?: string | null;
      emailConfirmed?: boolean;
      refreshTokenRefreshIntervalInSeconds?: number;
      inactivityTimeoutInSeconds?: number;
    };
    MarkSensitiveColumnRequestModel: {
      workspaceId?: string | null;
      columnKeys?: components['schemas']['ColumnKey'][] | null;
    };
    NotificationLevel: 'None' | 'MentionsOnly' | 'All';
    NumericDefinition: {
      precision?: number;
      scale?: number;
      columnType?: string | null;
      hasValue?: boolean;
      maxValue?: number;
      isUnsigned?: boolean;
    };
    PartitionStateEnum: 'Neither' | 'Repartition' | 'Coalesce';
    PasswordChangeModel: {
      originalPassword?: string | null;
      newPassword?: string | null;
      confirmNewPassword?: string | null;
    };
    PiiReportRun: {
      id: string;
      fingerprint: components['schemas']['Fingerprint'];
      fingerprintId: string;
      databaseScan?: components['schemas']['DatabaseScan'];
      databaseScanId?: string | null;
      startTime?: components['schemas']['Instant'];
      endTime?: components['schemas']['Instant'];
      publishedTime: components['schemas']['Instant'];
      errorMessages?: string | null;
      status: string;
      progress: number;
      configSnapshot?: string | null;
      results?: string | null;
      createdDate: components['schemas']['Instant'];
      lastModifiedDate: components['schemas']['Instant'];
    };
    PostJobScript: {
      scriptName?: string | null;
      script?: string | null;
      lastEditedBy?: string | null;
      lastEdited?: string | null;
      warningsEnabled?: boolean | null;
      isEnabled?: boolean;
      scriptOrder?: number;
    };
    RefreshTokenRequestModel: {
      refreshToken: string;
    };
    RefreshTokenResponseModel: {
      userId?: string | null;
      username?: string | null;
      jwt?: string | null;
      expiresIn?: number;
      refreshToken?: string;
      refreshTokenRefreshIntervalInSeconds?: number;
      inactivityTimeoutInSeconds?: number;
    };
    RegistrationRequestModel: {
      email: string;
      password: string;
      firstName?: string | null;
      lastName?: string | null;
    };
    RenameWorkspaceRequestModel: {
      workspaceName?: string | null;
    };
    Replacement: {
      name?: string | null;
      links?: components['schemas']['Link'][] | null;
      table?: string | null;
      schema?: string | null;
      partitions?: string[] | null;
    };
    ResetPasswordRequestModel: {
      token?: string | null;
      userName?: string | null;
      newPassword?: string | null;
    };
    S3Model: {
      id?: string | null;
      s3BucketPath?: string | null;
      awsAccessKeyId?: string | null;
      awsSecretAccessKey?: string | null;
      awsRegion?: components['schemas']['AwsRegionEnum'];
    };
    SchemaAndTable: {
      schema?: string | null;
      table?: string | null;
    };
    SchemaDiffIssueEnum:
      | 'new_column'
      | 'changed_column_type'
      | 'new_table'
      | 'resolve_all'
      | 'missing_column'
      | 'missing_table'
      | 'changed_nullability'
      | 'new_collection'
      | 'missing_collection'
      | 'new_path_type'
      | 'missing_path_type';
    SchemaDiffItem: {
      schemaName?: string | null;
      tableName?: string | null;
      issueCode?: string | null;
      columnName?: string | null;
      oldDataType?: string | null;
      newDataType?: string | null;
    };
    SchemaDiffItemResolveRequestModel: {
      workspaceId?: string | null;
      issueCode?: components['schemas']['SchemaDiffIssueEnum'];
      schemaName?: string | null;
      tableName?: string | null;
      columnName?: string | null;
      dataType?: string | null;
    };
    SchemaDiffMultipleItemsResolveRequestModel: {
      items?: components['schemas']['SchemaDiffItemResolveRequestModel'][] | null;
    };
    SetBulkTableModeRequestModel: {
      tables?: components['schemas']['SchemaAndTable'][] | null;
      tableModeEnum?: components['schemas']['TableModeEnum'];
    };
    ShareableEntityModel: {
      id?: string | null;
      name?: string | null;
    };
    SparkConfigEntryModel: {
      config?: string | null;
      value?: string | null;
    };
    SparkConnectionInfoRequestModel: {
      workspaceId?: string | null;
      databricksClusterConnectionInfo?: components['schemas']['DatabricksClusterConnectionInfo'];
      emrStepsConnectionInfo?: components['schemas']['EmrStepsConnectionInfo'];
      sparkConfig?: components['schemas']['SparkConfigEntryModel'][] | null;
    };
    SparkConnectionModel: {
      id?: string | null;
      databricksApiToken?: string | null;
      databricksHostUrl?: string | null;
      databricksHttpPath?: string | null;
      databricksPort?: number;
      emrClusterId?: string | null;
      useDatabricksJobCluster?: boolean;
      awsAttributesForDatabricksJobCluster?: string | null;
    };
    SshConnectionInfoModel: {
      sshHost?: string | null;
      sshPort?: number;
      sshUser?: string | null;
      sshPrivateKey?: string | null;
      sshPassphrase?: string | null;
    };
    StrictGenerationEnum: 'NotStrict' | 'RejectOnSchemaActions' | 'RejectOnAllSchemaItems';
    StringStringKeyValuePair: {
      key?: string | null;
      value?: string | null;
    };
    SubsetAction: {
      table?: components['schemas']['SchemaAndTable'];
      actionType?: components['schemas']['SubsetActionType'];
      contributingTables?: components['schemas']['SchemaAndTable'][] | null;
    };
    SubsetActionType: 'Direct' | 'Upstream' | 'Downstream';
    SubsetAlgoEnum: 'Classic' | 'Full';
    SubsetPreview: {
      workspaceId?: string | null;
      subsetTargetHash?: number;
      subsetTables?: components['schemas']['SchemaAndTable'][] | null;
      subsetActionPlan?: components['schemas']['SubsetAction'][] | null;
    };
    SubsetTarget: {
      schema?: string | null;
      table?: string | null;
      whereClause?: string | null;
      percent?: number;
      ignoreUpstreamTables?: boolean;
    };
    Table: {
      tableName?: string | null;
      schemaOfTable?: string | null;
      columns?: components['schemas']['Column'][] | null;
      rowCountEstimate?: number;
    };
    TableMode: {
      schema?: string | null;
      table?: string | null;
      tableModeEnum?: components['schemas']['TableModeEnum'];
      syntheticRows?: number;
      incrementalComparisonField?: string | null;
      filterClause?: string | null;
      repartitionNumber?: number | null;
      coalesceNumber?: number | null;
      partitionState?: components['schemas']['PartitionStateEnum'];
      errorOnOverwrite?: boolean;
    };
    TableModeEnum: 'Masked' | 'Synthesized' | 'Truncated' | 'PreserveDestination' | 'Incremental';
    TransferOwnershipRequestModel: {
      newOwnerUserId?: string | null;
    };
    UpdateTableReplacementsRequestModel: {
      replacements?: {
        [key: string]: components['schemas']['Replacement'];
      } | null;
    };
    UserApiKey: {
      id: string;
      userId: string;
      user?: components['schemas']['AppUser'];
      name: string;
      encryptedKey: string;
      key?: string | null;
      createdDate: components['schemas']['Instant'];
      lastUsed?: components['schemas']['Instant'];
      maskedKey?: string | null;
    };
    UserApiKeyModel: {
      id?: string | null;
      userId?: string | null;
      name?: string | null;
      key?: string | null;
      createdDate?: components['schemas']['Instant'];
      lastUsed?: components['schemas']['Instant'];
    };
    UserApiKeyRequestModel: {
      name: string;
    };
    UserSettingsRequestModel: {
      notificationLevelPreference?: components['schemas']['NotificationLevel'];
    };
    UserSettingsResponseModel: {
      notificationLevelPreference?: components['schemas']['NotificationLevel'];
    };
    UserUploadedForeignKeyData: {
      fileName?: string | null;
      foreignKeys?: {
        [key: string]: components['schemas']['FkUploadModelItem'];
      } | null;
    };
    WebhookConfiguration: {
      webhookName?: string | null;
      webhookUrl?: string | null;
      sendOnSuccess?: boolean;
      sendOnFailure?: boolean;
      sendOnCancel?: boolean;
      lastEditedBy?: string | null;
      lastEdited?: string | null;
      isEnabled?: boolean;
      customHeaders?: {
        [key: string]: components['schemas']['StringStringKeyValuePair'];
      } | null;
      customProperties?: {
        [key: string]: components['schemas']['StringStringKeyValuePair'];
      } | null;
    };
    WebhookTestRequestModel: {
      testWebhookUrl?: string | null;
      testWebhookStatus?: string | null;
      testWebhookJobId?: string | null;
      testCustomHeaders?: {
        [key: string]: components['schemas']['StringStringKeyValuePair'];
      } | null;
      testCustomProperties?: {
        [key: string]: components['schemas']['StringStringKeyValuePair'];
      } | null;
    };
    WorkspaceEntry: {
      id?: string | null;
      fingerprintName?: string | null;
      databaseType?: string | null;
      ownedByUserId?: string | null;
      /**
       * The level of access your user has to this workspace.
       * <br />Values are 0 - None, 1 - Viewer, 2 - Auditor, 3 - Editor, 999 - Owner.
       */
      accessLevel?: number;
      latestJobStatus?: string | null;
      latestJobPublishedTime?: components['schemas']['Instant'];
      latestJobStartTime?: components['schemas']['Instant'];
      latestJobEndTime?: components['schemas']['Instant'];
      mostRecentFailedJobTime?: components['schemas']['Instant'];
      subsettingEnabled?: boolean;
      postJobScriptsEnabled?: boolean;
      fkUploadEnabled?: boolean;
      tags?: { [key: string]: string } | null;
    };
    WorkspaceModel: {
      id?: string | null;
      fingerprintName?: string | null;
      replacements?: {
        [key: string]: components['schemas']['Replacement'];
      } | null;
      tableModes?: { [key: string]: components['schemas']['TableMode'] } | null;
      enableSubsetting?: boolean;
      processAllTablesWhenSubsetting?: boolean;
      subsetTargets?: {
        [key: string]: components['schemas']['SubsetTarget'];
      } | null;
      postJobScripts?: {
        [key: string]: components['schemas']['PostJobScript'];
      } | null;
      foreignKeyData?: components['schemas']['UserUploadedForeignKeyData'];
      schemaVersion?: number;
      subsetAlgorithm?: components['schemas']['SubsetAlgoEnum'];
      canUseClassicSubsetAlgorithm?: boolean;
      tags?: { [key: string]: string } | null;
    };
    WorkspaceShare: {
      id?: string | null;
      sharedWithUserId?: string | null;
      sharedWithUser?: components['schemas']['AppUser'];
      sharedWithGroupId?: string | null;
      sharedWithGroup?: components['schemas']['Group'];
      workspaceId: string;
      accessLevel: components['schemas']['WorkspaceShareAccessLevel'];
      sharedByUserId: string;
      createdDate: components['schemas']['Instant'];
      lastModifiedDate: components['schemas']['Instant'];
    };
    WorkspaceShareAccessLevel: 'Viewer' | 'Auditor' | 'Editor' | 'Owner';
    WorkspaceShareModel: {
      workspaceShareId?: string | null;
      /** The user that the workspace is shared with. This field will be null if the share is for a group. */
      sharedWithUserId?: string | null;
      /** The group that the workspace is shared with. This field will be null if the share is for a user. */
      sharedWithGroupId?: string | null;
      /** The name of the user or group the workspace is shared with. */
      sharedWithName?: string | null;
      /**
       * The level of access your user has to this workspace.
       * <br />Values are 0 - None, 1 - Viewer, 2 - Auditor, 3 - Editor, 999 - Owner.
       */
      accessLevel?: number;
    };
  };
}

export interface operations {}

export interface external {}
